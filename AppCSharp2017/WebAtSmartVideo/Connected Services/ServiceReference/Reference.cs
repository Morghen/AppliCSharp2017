//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAtSmartVideo.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ISmartWcf")]
    public interface ISmartWcf {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/getFilmList", ReplyAction="http://tempuri.org/ISmartWcf/getFilmListResponse")]
        FilmsDTO.FilmDTO[] getFilmList(int offset, int nbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/getFilmList", ReplyAction="http://tempuri.org/ISmartWcf/getFilmListResponse")]
        System.Threading.Tasks.Task<FilmsDTO.FilmDTO[]> getFilmListAsync(int offset, int nbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/CountFilm", ReplyAction="http://tempuri.org/ISmartWcf/CountFilmResponse")]
        int CountFilm();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/CountFilm", ReplyAction="http://tempuri.org/ISmartWcf/CountFilmResponse")]
        System.Threading.Tasks.Task<int> CountFilmAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/UpdateFilm", ReplyAction="http://tempuri.org/ISmartWcf/UpdateFilmResponse")]
        bool UpdateFilm(int idFilm, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/UpdateFilm", ReplyAction="http://tempuri.org/ISmartWcf/UpdateFilmResponse")]
        System.Threading.Tasks.Task<bool> UpdateFilmAsync(int idFilm, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/RefreshFilm", ReplyAction="http://tempuri.org/ISmartWcf/RefreshFilmResponse")]
        FilmsDTO.FilmDTO RefreshFilm(int idFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/RefreshFilm", ReplyAction="http://tempuri.org/ISmartWcf/RefreshFilmResponse")]
        System.Threading.Tasks.Task<FilmsDTO.FilmDTO> RefreshFilmAsync(int idFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/GetFilmDetails", ReplyAction="http://tempuri.org/ISmartWcf/GetFilmDetailsResponse")]
        FilmsDTO.FilmDTO GetFilmDetails(int idfilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/GetFilmDetails", ReplyAction="http://tempuri.org/ISmartWcf/GetFilmDetailsResponse")]
        System.Threading.Tasks.Task<FilmsDTO.FilmDTO> GetFilmDetailsAsync(int idfilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/GetData", ReplyAction="http://tempuri.org/ISmartWcf/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/GetData", ReplyAction="http://tempuri.org/ISmartWcf/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ISmartWcf/GetDataUsingDataContractResponse")]
        SmartWCFService.CompositeType GetDataUsingDataContract(SmartWCFService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWcf/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ISmartWcf/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<SmartWCFService.CompositeType> GetDataUsingDataContractAsync(SmartWCFService.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISmartWcfChannel : WebAtSmartVideo.ServiceReference.ISmartWcf, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SmartWcfClient : System.ServiceModel.ClientBase<WebAtSmartVideo.ServiceReference.ISmartWcf>, WebAtSmartVideo.ServiceReference.ISmartWcf {
        
        public SmartWcfClient() {
        }
        
        public SmartWcfClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SmartWcfClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartWcfClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartWcfClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FilmsDTO.FilmDTO[] getFilmList(int offset, int nbr) {
            return base.Channel.getFilmList(offset, nbr);
        }
        
        public System.Threading.Tasks.Task<FilmsDTO.FilmDTO[]> getFilmListAsync(int offset, int nbr) {
            return base.Channel.getFilmListAsync(offset, nbr);
        }
        
        public int CountFilm() {
            return base.Channel.CountFilm();
        }
        
        public System.Threading.Tasks.Task<int> CountFilmAsync() {
            return base.Channel.CountFilmAsync();
        }
        
        public bool UpdateFilm(int idFilm, string url) {
            return base.Channel.UpdateFilm(idFilm, url);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFilmAsync(int idFilm, string url) {
            return base.Channel.UpdateFilmAsync(idFilm, url);
        }
        
        public FilmsDTO.FilmDTO RefreshFilm(int idFilm) {
            return base.Channel.RefreshFilm(idFilm);
        }
        
        public System.Threading.Tasks.Task<FilmsDTO.FilmDTO> RefreshFilmAsync(int idFilm) {
            return base.Channel.RefreshFilmAsync(idFilm);
        }
        
        public FilmsDTO.FilmDTO GetFilmDetails(int idfilm) {
            return base.Channel.GetFilmDetails(idfilm);
        }
        
        public System.Threading.Tasks.Task<FilmsDTO.FilmDTO> GetFilmDetailsAsync(int idfilm) {
            return base.Channel.GetFilmDetailsAsync(idfilm);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public SmartWCFService.CompositeType GetDataUsingDataContract(SmartWCFService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<SmartWCFService.CompositeType> GetDataUsingDataContractAsync(SmartWCFService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
